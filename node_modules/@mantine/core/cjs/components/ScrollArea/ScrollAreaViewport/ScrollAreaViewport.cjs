'use client';
'use strict';

var React = require('react');
var hooks = require('@mantine/hooks');
require('clsx');
require('../../../core/MantineProvider/Mantine.context.cjs');
require('../../../core/MantineProvider/default-theme.cjs');
require('../../../core/MantineProvider/MantineProvider.cjs');
require('../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.cjs');
var Box = require('../../../core/Box/Box.cjs');
require('../../../core/DirectionProvider/DirectionProvider.cjs');
var ScrollArea_context = require('../ScrollArea.context.cjs');

const ScrollAreaViewport = React.forwardRef(
  ({ children, style, ...others }, ref) => {
    const ctx = ScrollArea_context.useScrollAreaContext();
    const rootRef = hooks.useMergedRef(ref, ctx.onViewportChange);
    return /* @__PURE__ */ React.createElement(
      Box.Box,
      {
        ...others,
        ref: rootRef,
        style: {
          overflowX: ctx.scrollbarXEnabled ? "scroll" : "hidden",
          overflowY: ctx.scrollbarYEnabled ? "scroll" : "hidden",
          ...style
        }
      },
      /* @__PURE__ */ React.createElement("div", { style: { minWidth: "100%", display: "table" }, ref: ctx.onContentChange }, children)
    );
  }
);
ScrollAreaViewport.displayName = "@mantine/core/ScrollAreaViewport";

exports.ScrollAreaViewport = ScrollAreaViewport;
//# sourceMappingURL=ScrollAreaViewport.cjs.map
