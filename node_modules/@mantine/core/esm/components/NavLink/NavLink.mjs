'use client';
import React from 'react';
import { useUncontrolled } from '@mantine/hooks';
import { getSpacing } from '../../core/utils/get-size/get-size.mjs';
import { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';
import 'clsx';
import '../../core/MantineProvider/Mantine.context.mjs';
import '../../core/MantineProvider/default-theme.mjs';
import '../../core/MantineProvider/MantineProvider.mjs';
import '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';
import { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';
import { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';
import { Box } from '../../core/Box/Box.mjs';
import { polymorphicFactory } from '../../core/factory/polymorphic-factory.mjs';
import '../../core/DirectionProvider/DirectionProvider.mjs';
import '../Accordion/Accordion.mjs';
import { AccordionChevron } from '../Accordion/AccordionChevron.mjs';
import '../Accordion/AccordionItem/AccordionItem.mjs';
import '../Accordion/AccordionPanel/AccordionPanel.mjs';
import '../Accordion/AccordionControl/AccordionControl.mjs';
import { Collapse } from '../Collapse/Collapse.mjs';
import { UnstyledButton } from '../UnstyledButton/UnstyledButton.mjs';
import classes from './NavLink.module.css.mjs';

const defaultProps = {};
const varsResolver = createVarsResolver(
  (theme, { variant, color, childrenOffset, autoContrast }) => {
    const colors = theme.variantColorResolver({
      color: color || theme.primaryColor,
      theme,
      variant: variant || "light",
      autoContrast
    });
    return {
      root: {
        "--nl-bg": color || variant ? colors.background : void 0,
        "--nl-hover": color || variant ? colors.hover : void 0,
        "--nl-color": color || variant ? colors.color : void 0
      },
      children: {
        "--nl-offset": getSpacing(childrenOffset)
      }
    };
  }
);
const NavLink = polymorphicFactory((_props, ref) => {
  const props = useProps("NavLink", defaultProps, _props);
  const {
    classNames,
    className,
    style,
    styles,
    unstyled,
    vars,
    opened,
    defaultOpened,
    onChange,
    children,
    onClick,
    active,
    disabled,
    leftSection,
    rightSection,
    label,
    description,
    disableRightSectionRotation,
    noWrap,
    childrenOffset,
    onKeyDown,
    autoContrast,
    ...others
  } = props;
  const getStyles = useStyles({
    name: "NavLink",
    props,
    classes,
    className,
    style,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver
  });
  const [_opened, setOpened] = useUncontrolled({
    value: opened,
    defaultValue: defaultOpened,
    finalValue: false,
    onChange
  });
  const withChildren = !!children;
  const handleClick = (event) => {
    onClick?.(event);
    if (withChildren) {
      event.preventDefault();
      setOpened(!_opened);
    }
  };
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    UnstyledButton,
    {
      ...getStyles("root"),
      component: "a",
      ref,
      onClick: handleClick,
      onKeyDown: (event) => {
        onKeyDown?.(event);
        if (event.nativeEvent.code === "Space" && withChildren) {
          event.preventDefault();
          setOpened(!_opened);
        }
      },
      unstyled,
      mod: { disabled, active, expanded: _opened },
      ...others
    },
    leftSection && /* @__PURE__ */ React.createElement(Box, { component: "span", ...getStyles("section"), mod: { position: "left" } }, leftSection),
    /* @__PURE__ */ React.createElement(Box, { ...getStyles("body"), mod: { "no-wrap": noWrap } }, /* @__PURE__ */ React.createElement(Box, { component: "span", ...getStyles("label") }, label), /* @__PURE__ */ React.createElement(Box, { component: "span", mod: { active }, ...getStyles("description") }, description)),
    (withChildren || rightSection) && /* @__PURE__ */ React.createElement(
      Box,
      {
        ...getStyles("section"),
        component: "span",
        mod: { rotate: _opened && !disableRightSectionRotation, position: "right" }
      },
      withChildren ? rightSection || /* @__PURE__ */ React.createElement(AccordionChevron, { ...getStyles("chevron") }) : rightSection
    )
  ), /* @__PURE__ */ React.createElement(Collapse, { in: _opened }, /* @__PURE__ */ React.createElement("div", { ...getStyles("children") }, children)));
});
NavLink.classes = classes;
NavLink.displayName = "@mantine/core/NavLink";

export { NavLink };
//# sourceMappingURL=NavLink.mjs.map
